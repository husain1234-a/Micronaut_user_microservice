micronaut:
  application:
    name: user-management
  email:
    from:
      email: en20cs301184@medicaps.ac.in
      name: Ishita Porwal
  sendgrid:
    api-key: ${SENDGRID_API_KEY:}
    from-email: ${SENDGRID_FROM_EMAIL:micronaut.yash@gmail.com}
  gemini:
    api-key: ${GEMINI_API_KEY:}
  notifications:
    admin-email: admin@yash.com
    reset-password-url: http://localhost/reset-password
    application-name: User Management System
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**
  server:
    port: 8081
    access-logger:
      enabled: true
    cors:
      enabled: true
  data:
    jdbc:
      repositories:
        enabled: false
    r2dbc:
      dialect: POSTGRES
  security:
    enabled: true
    token:
      jwt:
        enabled: true
        signatures:
          secret:
            generator:
              secret: "your-256-bit-secret-key-here-make-it-long-and-secure"
        claims:
          roles-name: "roles"
    intercept-url-map:
      - pattern: /api/auth/login
        access: isAnonymous()
      - pattern: /api/auth/logout
        access: isAuthenticated()
      - pattern: /api/users/**
        access: isAuthenticated()
      - pattern: /swagger/**
        access: isAnonymous()
      - pattern: /swagger-ui/**
        access: isAnonymous()
      - pattern: /v3/api-docs/**
        access: isAnonymous()
      - pattern: /**
        access: isAuthenticated()
  authentication: bearer
  cors:
    enabled: true
    configurations:
      web:
        allowedOrigins: "*"
        allowedMethods: GET,POST,PUT,DELETE,OPTIONS
        allowedHeaders: "*"
        exposedHeaders: "*"
        allowCredentials: true
        maxAge: 3600
logger:
  levels:
    io.micronaut.security: TRACE
    io.micronaut.security.rules: TRACE
    com.yash.usermanagement: DEBUG
 
# DynamoDB Configuration
dynamodb:
  endpoint: "http://localhost:8000"
 
# AWS Configuration
aws:
  region: ${AWS_REGION:us-east-1}
  credentials:
    access-key-id: ${ACCESS_KEY:dummy}
    secret-access-key: ${SECRET_KEY:dummy}
 
swagger:
  title: User Management API
  version: 1.0.0
  description: API for managing users and their notifications
 
openapi:
  title: User Management API
  version: 1.0
  description: API for managing users and their addresses

firebase:
  service-account-key-path: classpath:firebase-service-account.json

notification:
  service:
    url: http://localhost:9000

# --- ADD THIS BLOCK FOR R2DBC ---
r2dbc:
  datasources:
    default:
      url: r2dbc:postgresql://localhost:5432/usermanagement
      username: postgres
      password: admin123
      pool:
        enabled: true
